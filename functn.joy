(*
    module  : functn.joy
    version : 1.10
    date    : 01/14/25
*)
"numlib" libload.

"datefn.joy" include.
"amount.joy" include.

"readrec" libload.
"filter.joy" include.

"accread.joy" include.
"acctest.joy" include.
"stdread.joy" include.
"stdtest.joy" include.
"prcread.joy" include.
"prctest.joy" include.
"txtread.joy" include.
"jrnread.joy" include.

"summer.joy" include.
"paging.joy" include.

"formin.joy" include.
"palview.joy" include.
"balview.joy" include.

"accpost.joy" include.
"stdpost.joy" include.
"prcpost.joy" include.
"txtpost.joy" include.
"jrnpost.joy" include.

"yearend.joy" include.

LIBRA

update-screen ==	# [..] [.] var ch type vat descr [..]
(*
    Recreate the screen, updated with the contents that were read from the
    database.
*)
[[YOUR-CHOICE " " 18 12 textin]]

2 pick			# vat
2 over size - spaces concat
[18 10 textin]		# vat [18 10 textin]
cons			# [vat 18 10 textin]
VAT-CODE		# [vat 18 10 textin] prompt
swons			# [prompt vat 18 10 textin]
swons

3 pick			# type
2 over size - spaces concat
[18 9 textin]		# type [18 9 textin]
cons			# [type 18 9 textin]
ACCOUNT-TYPE		# [type 18 9 textin] prompt
swons			# [prompt type 18 9 textin]
swons

over			# descr
29 over size - spaces concat
[18 8 textin]		# descr [18 8 textin]
cons			# [descr 18 8 textin]
DESCRIPTION		# [descr 18 8 textin] prompt
swons			# [prompt descr 18 8 textin]
swons

[ACCOUNT 0 18 7 wordin test-acct]
swons;

(*
    See if the account exists and if it does, display its contents.
    Not only the contents should be displayed; the data structure should be
    updated as well, such that the contents can be modified instead of
    entered again.
*)
test-acct ==	# [..] [.] var ch
over		# [..] [.] var ch var
init-Acc Acc	# [..] [.] var ch var Acc
[[]] concat
case		# [..] [.] var ch type vat descr
[
update-screen	# [..] [.] var ch type vat descr [..]
swap		# [..] [.] var ch type vat [..] descr
18 8 false	# [..] [.] var ch type vat [..] descr 18 8 false
print		# [..] [.] var ch type vat [..]
swap		# [..] [.] var ch type [..] vat
18 10 false	# [..] [.] var ch type [..] vat 18 10 false
print		# [..] [.] var ch type [..]
swap		# [..] [.] var ch [..] type
18 9 false	# [..] [.] var ch [..] type 18 9 false
print		# [..] [.] var ch [..]
rollup		# [..] [.] [..] var ch
[rotated] dip	# [..] [.] [..] var ch
rolldown	# [..] [.] var ch [..]
pop		# [..] [.] var ch
]
[pop]		# not found
ifstring	# found
;

(* account entry *)
Acc-screen ==
ACCOUNT-SCREEN PrintHeader
[[ACCOUNT 0 18 7 wordin test-acct]
 [DESCRIPTION  "                                        " 18  8 textin]
 [ACCOUNT-TYPE "                                        " 18  9 textin]
 [VAT-CODE     "                                        " 18 10 textin]
 [YOUR-CHOICE  " " 18 12 textin]]
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop accpost] [] ifte;

update-screen-2 ==	# [..] [.] var ch acct [..]
(*
    Recreate the screen, updated with the contents that were read from the
    database.
*)
[[YOUR-CHOICE " " 18 10 textin]]

over			# acct
[18 8 wordin]		# acct [18 8 wordin]
cons			# [acct 18 8 wordin]
ACCOUNT			# [acct 18 8 wordin] prompt
swons			# [prompt acct 18 8 wordin]
swons			# [..]

[DESCRIPTION "                             " 18 7 textin test-descr]
swons;			# [..] [.] var ch acct [..]

(*
    See if the description exists and update the data structure.
*)
test-descr ==	# [..] [.] var ch
over		# [..] [.] var ch var
trim		# remove trailing spaces
[null]
[pop]
[
init-Std Std	# [..] [.] var ch var Std
[[]] concat
case		# [..] [.] var ch acct
[
update-screen-2	# [..] [.] var ch acct [..]
popd		# remove account
rollup		# [..] [.] [..] var ch
[rotated] dip	# [..] [.] [..] var ch
rolldown	# [..] [.] var ch [..]
pop		# [..] [.] var ch
]
[pop]		# not found
ifinteger	# found
]
ifte
;

(* standard entry *)
Std-screen ==
STANDARD-SCREEN PrintHeader
[[DESCRIPTION "                             " 18  7 textin test-descr]
 [ACCOUNT 0 18 8 wordin]
 [YOUR-CHOICE " " 18 10 textin]]
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop stdpost] [] ifte;

update-screen-3 ==	# [..] [.] var ch acct [..]
(*
    Recreate the screen, updated with the contents that were read from the
    database.
*)
[[YOUR-CHOICE " " 18 10 textin]]

over			# perc
[18 8 amount]		# perc [18 8 amount]
cons			# [perc 18 8 amount]
VAT-PERCENTAGE		# [perc 18 8 amount] prompt
swons			# [prompt perc 18 8 amount]
swons			# [..]

[VAT-CODE "  " 18  7 textin test-descr-3]
swons;			# [..] [.] var ch acct [..]

(*
    See if the description exists and update the data structure.
*)
test-descr-3 ==	# [..] [.] var ch
over		# [..] [.] var ch var
trim		# remove trailing spaces
[null]
[pop]
[
init-Prc Prc	# [..] [.] var ch var Prc
[[]] concat
case		# [..] [.] var ch perc
[
update-screen-3	# [..] [.] var ch perc [..]
popd		# remove percentage
rollup		# [..] [.] [..] var ch
[rotated] dip	# [..] [.] [..] var ch
rolldown	# [..] [.] var ch [..]
pop		# [..] [.] var ch
]
[pop]		# not found
ifinteger	# found
]
ifte
;

(* percentages entry *)
Prc-screen ==
PERCENTAGES-SCREEN PrintHeader
[[VAT-CODE "                             " 18 7 textin test-descr-3]
 [VAT-PERCENTAGE 0 18 8 amount]
 [YOUR-CHOICE " " 18 10 textin]]
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop prcpost] [] ifte;

(*
    See if the account exists and if it does, display its contents.
    The data structure need not be updated.

    Also check the VAT code. If present, calculate the VAT amount and the VAT
    account. Store the VAT amount in the data structure and post the VAT
    account in global variable Account.
*)
test-acct-3 ==	# [..] [.] var ch
over		# [..] [.] var ch var
init-Acc Acc	# [..] [.] var ch var Acc
[[]] concat
case		# [..] [.] var ch type VAT descr
[
40 9 false	# [..] [.] var ch type VAT descr 40 9 false
print		# [..] [.] var ch type VAT

[null]
[]
[dup		# [..] [.] var ch type VAT VAT
init-Std Std
[[pop 0]] concat
case		# [..] [.] var ch type VAT
[Account] assign
init-Prc Prc
[[pop 0]] concat
case		# [..] [.] var ch type perc
5 pick		# [..] [.] var ch type perc [..]
uncons		# [..] [.] var ch type perc [d] [..]
uncons		# [..] [.] var ch type perc [d] [b] [..]
uncons		# [..] [.] var ch type perc [d] [b] [r] [..]
uncons		# [..] [.] var ch type perc [d] [b] [r] [w] [..]
swap		# [..] [.] var ch type perc [d] [b] [r] [..] [w]
uncons		# [..] [.] var ch type perc [d] [b] [r] [..] t [w]
rest		# [..] [.] var ch type perc [d] [b] [r] [..] t [w]
4 pick		# [..] [.] var ch type perc [d] [b] [r] [..] t [w] [b]
second		# [..] [.] var ch type perc [d] [b] [r] [..] t [w] b
dup		# [..] [.] var ch type perc [d] [b] [r] [..] t [w] b b
8 pick		# [..] [.] var ch type perc [d] [b] [r] [..] t [w] b b perc
10000.0 / 1 + / - round trunc
swons		# [..] [.] var ch type perc [d] [b] [r] [..] t [w]
cons		# [..] [.] var ch type perc [d] [b] [r] [..] [w]
swons		# [..] [.] var ch type perc [d] [b] [r] [..]
cons		# [..] [.] var ch type perc [d] [b] [..]
cons		# [..] [.] var ch type perc [d] [..]
cons		# [..] [.] var ch type perc [..]
swap		# [..] [.] var ch type [..] perc
swapd		# [..] [.] var ch [..] type perc
[swapd] dip	# [..] [.] var [..] ch type perc
[[swapd] dip]
dip		# [..] [.] [..] var ch type perc
[[[rotated] dip]
dip] dip	# [..] [.] [..] var ch type perc
[[[popd] dip] dip]
dip		# [..] [.] var ch type perc
]
ifte

pop		# [..] [.] var ch type
pop		# [..] [.] var ch
]
[pop]		# not found
ifstring	# found
;

test-acct-4 ==	# [..] [.] var ch
over		# [..] [.] var ch var
init-Acc Acc	# [..] [.] var ch var Acc
[[]] concat
case		# [..] [.] var ch type VAT descr
[
40 10 false	# [..] [.] var ch type VAT descr 40 9 false
print		# [..] [.] var ch type VAT

[null]
[]
[dup		# [..] [.] var ch type VAT VAT
init-Std Std
[[pop 0]] concat
case		# [..] [.] var ch type VAT
[Account] assign
init-Prc Prc
[[pop 0]] concat
case		# [..] [.] var ch type perc
5 pick		# [..] [.] var ch type perc [..]
uncons		# [..] [.] var ch type perc [d] [..]
uncons		# [..] [.] var ch type perc [d] [b] [..]
uncons		# [..] [.] var ch type perc [d] [b] [r] [..]
uncons		# [..] [.] var ch type perc [d] [b] [r] [w] [..]
swap		# [..] [.] var ch type perc [d] [b] [r] [..] [w]
uncons		# [..] [.] var ch type perc [d] [b] [r] [..] t [w]
rest		# [..] [.] var ch type perc [d] [b] [r] [..] t [w]
4 pick		# [..] [.] var ch type perc [d] [b] [r] [..] t [w] [b]
second		# [..] [.] var ch type perc [d] [b] [r] [..] t [w] b
dup		# [..] [.] var ch type perc [d] [b] [r] [..] t [w] b b
8 pick		# [..] [.] var ch type perc [d] [b] [r] [..] t [w] b b perc
10000.0 / 1 + / - round trunc
swons		# [..] [.] var ch type perc [d] [b] [r] [..] t [w]
cons		# [..] [.] var ch type perc [d] [b] [r] [..] [w]
swons		# [..] [.] var ch type perc [d] [b] [r] [..]
cons		# [..] [.] var ch type perc [d] [b] [..]
cons		# [..] [.] var ch type perc [d] [..]
cons		# [..] [.] var ch type perc [..]
swap		# [..] [.] var ch type [..] perc
swapd		# [..] [.] var ch [..] type perc
[swapd] dip	# [..] [.] var [..] ch type perc
[[swapd] dip]
dip		# [..] [.] [..] var ch type perc
[[[rotated] dip]
dip] dip	# [..] [.] [..] var ch type perc
[[[popd] dip] dip]
dip		# [..] [.] var ch type perc
]
ifte

pop		# [..] [.] var ch type
pop		# [..] [.] var ch
]
[pop]		# not found
ifstring	# found
;

(* initial cash screen *)
Cash-initial-screen ==
[[CASH-ACCOUNT 0 18  7 wordin]
 [DATE         0 18  8 datein]
 [AMOUNT       0 18  9 amount]
 [ACCOUNT      0 18 10 wordin test-acct-4]
 [VAT-AMOUNT   0 18 11 amount]
 [YOUR-CHOICE  " " 18 13 textin]];

(* initial bank screen *)
Bank-initial-screen ==
[[BANK-ACCOUNT 0 18  7 wordin]
 [DATE         0 18  8 datein]
 [AMOUNT       0 18  9 amount]
 [ACCOUNT      0 18 10 wordin test-acct-4]
 [VAT-AMOUNT   0 18 11 amount]
 [YOUR-CHOICE  " " 18 13 textin]];

(* entry screen *)
Entry-screen ==
[[DATE        0 18  7 datein]
 [AMOUNT      0 18  8 amount]
 [ACCOUNT     0 18  9 wordin test-acct-3]
 [VAT-AMOUNT  0 18 10 amount]
 [YOUR-CHOICE " " 18 12 textin]];

(* cash entry *)
Cash-screen ==
CASH-SCREEN PrintHeader
(*
    If not found, the result will be 0.
*)
std-Cash
[null] [popd Cash-initial-screen] [Entry-screen] ifte
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop cashpost] [] ifte pop;

(* bank entry *)
Bank-screen ==
BANK-SCREEN PrintHeader
(*
    If not found, the result will be 0.
*)
std-Bank
[null] [popd Bank-initial-screen] [Entry-screen] ifte
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop bankpost] [] ifte pop;

(*
    See if the account exists and if it does, display its contents.
    The data structure need not be updated.
*)
test-acct-1 ==	# [..] [.] var ch
over		# [..] [.] var ch var
init-Acc Acc	# [..] [.] var ch var Acc
[[]] concat
case		# [..] [.] var ch type vat descr
[
40 8 false	# [..] [.] var ch type vat descr 40 8 false
print		# [..] [.] var ch type vat
pop		# [..] [.] var ch type
pop		# [..] [.] var ch
]
[pop]		# not found
ifstring	# found
;

test-acct-2 ==	# [..] [.] var ch
over		# [..] [.] var ch var
init-Acc Acc	# [..] [.] var ch var Acc
[[]] concat
case		# [..] [.] var ch type vat descr
[
40 10 false	# [..] [.] var ch type vat descr 40 10 false
print		# [..] [.] var ch type vat
pop		# [..] [.] var ch type
pop		# [..] [.] var ch
]
[pop]		# not found
ifstring	# found
;

(* memoriaal *)
Gen-screen ==
GENERAL-SCREEN PrintHeader
[[DATE         0 18  7 datein]
 [ACCOUNT-TO   0 18  8 wordin test-acct-1]
 [AMOUNT       0 18  9 amount]
 [ACCOUNT-FROM 0 18 10 wordin test-acct-2]
 [YOUR-CHOICE  " " 18 12 textin]]
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop memopost] [] ifte;

update-screen-4 ==	# [..] [.] var ch tekst accnt date amount [..]
[[YOUR-CHOICE " " 18 13 textin]]

4 pick			# tekst
29 over size - spaces concat
[18 11 textin]		# tekst [18 11 textin]
cons			# [tekst 18 11 textin]
NOTES			# [tekst 18 11 textin] prompt
swons			# [prompt tekst 18 11 textin]
swons

3 pick			# account
[18 10 wordin]		# account [18 10 wordin]
cons			# [account 18 10 wordin]
ACCOUNT			# [account 18 10 wordin] prompt
swons			# [prompt account 18 10 wordin]
swons

over			# amnt
[18 9 amount]		# amnt [18 9 amount]
cons			# [amnt 18 9 amount]
AMOUNT			# [amnt 18 9 amount] prompt
swons			# [prompt amnt 18 9 amount]
swons

2 pick			# date
[18 8 datein]		# date [18 8 datein]
cons			# [date 18 8 datein]
DATE			# [date 18 8 datein] prompt
swons			# [prompt date 18 8 datein]
swons

6 pick			# volgnr
[18 7 wordin test-volgnr]		# volgnr [18 7 wordin]
cons			# [volgnr 18 7 wordin]
SEQNR			# [volgnr 18 7 wordin] prompt
swons			# [prompt volgnr 18 7 wordin]
swons;

(*
    The posting is read after input of the sequence number. Only the first line
    is read, maybe that is sufficient? The code currently assumes that the
    sequence number can be found.
*)
test-volgnr ==	# [..] [.] var ch
over		# [..] [.] var ch var
dup		# [..] [.] var ch var var
init-Txt Txt	# [..] [.] var ch var var Txt
[[pop ""]] concat
case		# [..] [.] var ch var tekst

swap		# [..] [.] var ch tekst var
init-Jrn Jrn	# [..] [.] var ch tekst var Jrn
[[0]] concat
case		# [..] [.] var ch tekst accnt date amount

[dup null]	# [..] [.] var ch tekst var 0
[pop pop pop]	# [..] [.] var ch
[
(*
    From here on forwards, the screen needs to be rebuild, including the value
    of the variables.
*)
update-screen-4	# [..] [.] var ch tekst accnt date amount [..]
dup
vars-loop	# [..] [.] var ch tekst accnt date amount [..]

popd		# [..] [.] var ch tekst accnt date [..]
popd		# [..] [.] var ch tekst accnt [..]
popd		# [..] [.] var ch tekst [..]
popd		# [..] [.] var ch [..]

rollup		# [..] [.] [..] var ch
[rotated] dip	# [..] [.] [..] var ch
rolldown	# [..] [.] var ch [..]
pop		# [..] [.] var ch
] ifte
;

(* notes *)
Note-screen ==
NOTES-SCREEN PrintHeader
[[SEQNR   0 18  7 wordin test-volgnr]
 [DATE    0 18  8 datein]
 [AMOUNT  0 18  9 amount]
 [ACCOUNT 0 18 10 wordin]
 [NOTES   "                             " 18 11 textin]
 [YOUR-CHOICE " " 18 13 textin]]
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop txtpost] [] ifte;

(* year screen *)
Year-screen ==
YEAR-CLOSING-SCREEN PrintHeader
[[DATE-FROM   0 18 7 datein]
 [DATE-TO     0 56 7 datein]
 [ACCOUNT     0 18 8 wordin]
 [YOUR-CHOICE " " 18 10 textin]]
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop do-yearend pop] [] ifte;

(* common part of report handling *)
rest-report ==
'\t swons
[ "\t******" ] cons concat
sysdate datestr '\t swons
["" ""] cons concat swoncat
1 [Xpos] assign 1 [Ypos] assign
0 [Start] assign clrscr pager pop
(* the next lines only for reports w/o selection screen *)
clrscr
PrintBox;
# REPORTS-MENU PrintHeader;

(* chart of accounts *)
Acc-view ==
account-list write-Acc
["" ""] CHART-ACCOUNTS-SCR
rest-report;

(* standard accounts *)
Std-view ==
standard-list write-Std
["" ""] STANDARD-ACCOUNTS-SCR
rest-report;

(* percentages *)
Prc-view ==
percent-list write-Prc
["" ""] PERCENTAGES-SCR
rest-report;

(* transactions *)
Jrn-view ==
read-filter
(*
    Read texts and store this in Texts.
*)
init-Txt Txt
[[pop ""]] concat
[Texts] assign
(*
    Read transactions and format to strings.
*)
init-Jrn Jrn
apply-filter
write-Jrn
(*
    Display screen including header.
*)
["" ""] TRANSACTION-SCREEN
rest-report;

(* common view *)
Com-screen ==
[[DATE-FROM   0 18 7 datein]
 [DATE-TO     0 56 7 datein]
 [SEQNR-FROM  0 18 8 wordin]
 [SEQNR-TO    0 56 8 wordin]
 [YOUR-CHOICE " " 18 10 textin]];

Jrn-screen ==
TRANSACTION-SCREEN PrintHeader
Com-screen
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop Jrn-view pop] [] ifte;

(*
    Postings limited to one account with a summary at the end.
*)
Gl-view ==
read-filter
dup fifth second [Account] assign
(*
    Read texts and store this in Texts.
*)
init-Txt Txt
[[pop ""]] concat
[Texts] assign
(*
    Read transactions and apply the filters.
*)
init-Jrn Jrn
[second Account =] filter
apply-filter

dup

[fourth] map sum

swap

write-Jrn

["\t\t\t--------------------------"] concat

swap

format-num right-align
"\t" BALANCE "\t\t" concat concat
swoncat unitlist concat

["" ""] LEDGER-VIEW-SCREEN
rest-report;

test-acct-9 ==	# [..] [.] var ch
over		# [..] [.] var ch var
init-Acc Acc	# [..] [.] var ch var Acc
[[]] concat
case		# [..] [.] var ch type vat descr
[
40 9 false	# [..] [.] var ch type vat descr 40 8 false
print		# [..] [.] var ch type vat
clreoln
pop		# [..] [.] var ch type
pop		# [..] [.] var ch
]
[pop]		# not found
ifstring	# found
;

(* ledger view *)
Gl-screen ==
LEDGER-VIEW-SCREEN PrintHeader
[[DATE-FROM   0 18 7 datein]
 [DATE-TO     0 56 7 datein]
 [SEQNR-FROM  0 18 8 wordin]
 [SEQNR-TO    0 56 8 wordin]
 [ACCOUNT     0 18 9 wordin test-acct-9]
 [YOUR-CHOICE " " 18 11 textin]]
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop Gl-view pop] [] ifte;

(* palview *)
Pal-screen ==
PROFIT-LOSS-SCREEN PrintHeader
Com-screen
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop Pal-view pop] [] ifte;

(* balview *)
Bal-screen ==
BALANCE-SHEET-SCREEN PrintHeader
Com-screen
dup
text-loop
dup
vars-loop
input-loop
[Default -2 =] [pop Bal-view pop] [] ifte;

function ==
2 pick
[[14
  [[1 Acc-screen]
   [2 Std-screen]
   [3 Prc-screen]
   []
  ] case
 ]
 [16
  [[1 Cash-screen]
   [2 Bank-screen]
   [3 Gen-screen]
   [4 Note-screen]
   [5 Year-screen]
   []
  ] case
 ]
 [18
  [[1 Acc-view]
   [2 Std-view]
   [3 Prc-view]
   [4 Jrn-screen]
   [5 Gl-screen]
   [6 Pal-screen]
   [7 Bal-screen]
   []
  ] case
 ]
 []
] case.
